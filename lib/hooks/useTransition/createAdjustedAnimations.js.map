{"version":3,"sources":["../../../src/hooks/useTransition/createAdjustedAnimations.js"],"names":["timeline","lastOptions","newOptions","name","currentValues","getCurrentValues","shouldRedirect","progress","animations","Object","keys","map","key","oldOption","option","from","controls","Array","isArray","slice","unshift","value","animation","property","to","startAt","endAt","easing","easeOut","expo"],"mappings":";;;;;;;AAAA;;;;;;;;;;eAEe,kBAACA,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAuC;AACpD,MAAMC,IAAI,GAAG,eAAb;AACA,MAAMC,aAAa,GAAGJ,QAAQ,CAACK,gBAAT,GAA4BF,IAA5B,CAAtB;AACA,MAAMG,cAAc,GAAGN,QAAQ,CAACO,QAAT,KAAsB,CAA7C;AAEA,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYR,UAAZ,EAAwBS,GAAxB,CAA4B,UAAAC,GAAG,EAAI;AACpD,QAAMC,SAAS,GAAGZ,WAAW,CAACW,GAAD,CAA7B;AACA,QAAME,MAAM,GAAGZ,UAAU,CAACU,GAAD,CAAzB;AACA,QAAMG,IAAI,GAAGX,aAAa,CAACQ,GAAD,CAA1B;AACA,QAAMI,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcJ,MAAM,CAACE,QAArB,IACbF,MAAM,CAACE,QAAP,CAAgBG,KAAhB,CAAsB,CAAtB,CADa,GAEb,EAFJ;;AAIA,QAAIb,cAAJ,EAAoB;AAClBU,MAAAA,QAAQ,CAACI,OAAT,CAAiBP,SAAS,CAACQ,KAA3B;AACD;;AAED,QAAMC,SAAS,qBACVR,MADU;AAEbS,MAAAA,QAAQ,EAAEX,GAFG;AAGbT,MAAAA,IAAI,EAAEA,IAHO;AAIbqB,MAAAA,EAAE,EAAEV,MAAM,CAACO,KAJE;AAKbN,MAAAA,IAAI,EAAJA,IALa;AAMbC,MAAAA,QAAQ,EAARA,QANa;AAObS,MAAAA,OAAO,EAAE,OAAOX,MAAM,CAACW,OAAd,KAA0B,QAA1B,GAAqCX,MAAM,CAACW,OAA5C,GAAsD,CAPlD;AAQbC,MAAAA,KAAK,EAAE,OAAOZ,MAAM,CAACY,KAAd,KAAwB,QAAxB,GAAmCZ,MAAM,CAACY,KAA1C,GAAkD,CAR5C;AASbC,MAAAA,MAAM,EAAEC,iBAAQd,MAAM,CAACa,MAAf,KAA0BC,iBAAQC;AAT7B,MAAf;;AAYA,WAAOP,SAAP;AACD,GAzBkB,CAAnB;AA2BA,SAAOd,UAAP;AACD,C","sourcesContent":["import easeOut from \"./easeOut.js\";\n\nexport default (timeline, lastOptions, newOptions) => {\n  const name = 'useTransition';\n  const currentValues = timeline.getCurrentValues()[name];\n  const shouldRedirect = timeline.progress !== 1;\n\n  const animations = Object.keys(newOptions).map(key => {\n    const oldOption = lastOptions[key];\n    const option = newOptions[key];\n    const from = currentValues[key];\n    const controls = Array.isArray(option.controls)\n      ? option.controls.slice(0)\n      : [];\n\n    if (shouldRedirect) {\n      controls.unshift(oldOption.value);\n    }\n\n    const animation = {\n      ...option,\n      property: key,\n      name: name,\n      to: option.value,\n      from,\n      controls,\n      startAt: typeof option.startAt === \"number\" ? option.startAt : 0,\n      endAt: typeof option.endAt === \"number\" ? option.endAt : 1,\n      easing: easeOut[option.easing] || easeOut.expo\n    };\n\n    return animation;\n  });\n\n  return animations;\n};\n"],"file":"createAdjustedAnimations.js"}